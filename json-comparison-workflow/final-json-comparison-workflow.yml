name: JSON Comparison Workflow

on:
  workflow_dispatch:
    inputs:
      folder_path:
        description: 'Folder path to scan for JSON files (e.g., config/, data/)'
        required: true
        default: 'config'
      base_url:
        description: 'Base URL for remote JSON files (e.g., https://api.example.com/config)'
        required: true
        default: 'https://api.example.com/config'
      slack_channel:
        description: 'Slack channel to send notifications to'
        required: true
        default: '#json-comparison'
      comparison_mode:
        description: 'Comparison mode (strict|lenient)'
        required: false
        default: 'strict'
      ignore_keys:
        description: 'Comma-separated list of keys to ignore during comparison'
        required: false
        default: ''
      file_extensions:
        description: 'Comma-separated file extensions to include (e.g., json,jsonc)'
        required: false
        default: 'json'
      recursive:
        description: 'Scan subfolders recursively'
        required: false
        default: 'false'
  schedule:
    # Run daily at 9 AM UTC
    - cron: '0 9 * * *'

env:
  REPORTS_DIR: reports

jobs:
  log-inputs:
    runs-on: ubuntu-latest
    outputs:
      folder_path: ${{ steps.log-inputs.outputs.folder_path }}
      base_url: ${{ steps.log-inputs.outputs.base_url }}
      slack_channel: ${{ steps.log-inputs.outputs.slack_channel }}
      comparison_mode: ${{ steps.log-inputs.outputs.comparison_mode }}
      ignore_keys: ${{ steps.log-inputs.outputs.ignore_keys }}
      file_extensions: ${{ steps.log-inputs.outputs.file_extensions }}
      recursive: ${{ steps.log-inputs.outputs.recursive }}
    steps:
      - name: 📝 Log Inputs
        id: log-inputs
        run: |
          echo "=== JSON Comparison Workflow Inputs ==="
          echo "Folder Path: ${{ github.event.inputs.folder_path || 'config' }}"
          echo "Base URL: ${{ github.event.inputs.base_url || 'https://api.example.com/config' }}"
          echo "Slack Channel: ${{ github.event.inputs.slack_channel || '#json-comparison' }}"
          echo "Comparison Mode: ${{ github.event.inputs.comparison_mode || 'strict' }}"
          echo "Ignore Keys: ${{ github.event.inputs.ignore_keys || '' }}"
          echo "File Extensions: ${{ github.event.inputs.file_extensions || 'json' }}"
          echo "Recursive: ${{ github.event.inputs.recursive || 'false' }}"
          echo "=========================================="
          
          echo "folder_path=${{ github.event.inputs.folder_path || 'config' }}" >> $GITHUB_OUTPUT
          echo "base_url=${{ github.event.inputs.base_url || 'https://api.example.com/config' }}" >> $GITHUB_OUTPUT
          echo "slack_channel=${{ github.event.inputs.slack_channel || '#json-comparison' }}" >> $GITHUB_OUTPUT
          echo "comparison_mode=${{ github.event.inputs.comparison_mode || 'strict' }}" >> $GITHUB_OUTPUT
          echo "ignore_keys=${{ github.event.inputs.ignore_keys || '' }}" >> $GITHUB_OUTPUT
          echo "file_extensions=${{ github.event.inputs.file_extensions || 'json' }}" >> $GITHUB_OUTPUT
          echo "recursive=${{ github.event.inputs.recursive || 'false' }}" >> $GITHUB_OUTPUT

  run-comparison:
    needs: log-inputs
    runs-on: ubuntu-latest
    outputs:
      startedAt: ${{ steps.run_comparison.outputs.startedAt }}
      completedAt: ${{ steps.run_comparison.outputs.completedAt }}
      has_differences: ${{ steps.run_comparison.outputs.has_differences }}
      report_path: ${{ steps.run_comparison.outputs.report_path }}
      slack_summary: ${{ steps.run_comparison.outputs.slack_summary }}
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: 📦 Install Dependencies
        run: |
          npm install @actions/github @actions/exec @slack/web-api deep-diff

      - name: 🔍 Run JSON Comparison
        id: run_comparison
        run: |
          echo "Starting JSON comparison at $(date -u +%Y-%m-%dT%H:%M:%SZ)"
          echo "startedAt=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT
          
          # Create the comparison script
          cat > compare-json.js << 'EOF'
          const github = require('@actions/github');
          const { exec } = require('@actions/exec');
          const { WebClient } = require('@slack/web-api');
          const diff = require('deep-diff');
          const fs = require('fs');
          const path = require('path');
          const https = require('https');
          const http = require('http');

          async function run() {
            try {
              // Get inputs
              const folderPath = process.env.FOLDER_PATH || 'config';
              const baseUrl = process.env.BASE_URL || 'https://api.example.com/config';
              const comparisonMode = process.env.COMPARISON_MODE || 'strict';
              const ignoreKeys = process.env.IGNORE_KEYS || '';
              const fileExtensions = process.env.FILE_EXTENSIONS || 'json';
              const recursive = process.env.RECURSIVE === 'true';

              console.log(`🔍 Scanning folder: ${folderPath}`);
              console.log(`🌐 Base URL: ${baseUrl}`);
              console.log(`⚙️ Comparison mode: ${comparisonMode}`);
              console.log(`🚫 Ignore keys: ${ignoreKeys || 'none'}`);
              console.log(`📁 File extensions: ${fileExtensions}`);
              console.log(`🔄 Recursive: ${recursive}`);

              // Find all JSON files in the folder
              const jsonFiles = await findJsonFilesInFolder(folderPath, fileExtensions.split(','), recursive);

              if (jsonFiles.length === 0) {
                console.log(`⚠️ No JSON files found in folder: ${folderPath}`);
                return;
              }

              console.log(`📁 Found ${jsonFiles.length} JSON files to compare`);

              // Compare each JSON file
              const results = [];
              let hasDifferences = false;
              
              for (const jsonFile of jsonFiles) {
                console.log(`🔍 Comparing file: ${jsonFile}`);
                
                try {
                  // Read local JSON file
                  const localJson = await readJsonFile(jsonFile);
                  if (!localJson) {
                    console.log(`⚠️ Failed to read local file: ${jsonFile}`);
                    results.push({
                      file: jsonFile,
                      status: 'error',
                      message: 'Failed to read local file'
                    });
                    continue;
                  }
                  
                  // Fetch remote JSON file
                  const remoteUrl = `${baseUrl}/${jsonFile}`;
                  const remoteJson = await fetchJsonFromUrl(remoteUrl);
                  
                  if (!remoteJson) {
                    console.log(`ℹ️ Remote file not found, ignoring: ${remoteUrl}`);
                    // Skip this file instead of treating it as an error
                    continue;
                  }
                  
                  // Compare JSON files
                  const ignoreKeysArray = ignoreKeys ? ignoreKeys.split(',').map(key => key.trim()).filter(key => key) : [];
                  const comparisonResult = compareJsonFiles(localJson, remoteJson, {
                    mode: comparisonMode,
                    ignoreKeys: ignoreKeysArray
                  });
                  
                  if (comparisonResult.identical) {
                    console.log(`✅ ${jsonFile}: Identical`);
                    results.push({
                      file: jsonFile,
                      status: 'identical',
                      message: 'Files are identical'
                    });
                  } else {
                    console.log(`❌ ${jsonFile}: Different`);
                    hasDifferences = true;
                    results.push({
                      file: jsonFile,
                      status: 'different',
                      message: 'Files are different',
                      differences: comparisonResult.differences
                    });
                  }
                } catch (error) {
                  console.log(`❌ Error comparing ${jsonFile}: ${error.message}`);
                  results.push({
                    file: jsonFile,
                    status: 'error',
                    message: error.message
                  });
                }
              }

              // Generate HTML report for differences
              let reportPath = null;
              if (hasDifferences) {
                try {
                  const reportData = {
                    folder: folderPath,
                    baseUrl,
                    results,
                    timestamp: new Date().toISOString()
                  };

                  const reportFileName = `json-comparison-report-${Date.now()}.html`;
                  const reportDir = path.join(process.cwd(), 'reports');
                  
                  // Create reports directory if it doesn't exist
                  if (!fs.existsSync(reportDir)) {
                    fs.mkdirSync(reportDir, { recursive: true });
                  }
                  
                  reportPath = path.join(reportDir, reportFileName);
                  await generateAndSaveReport(reportData, reportPath);
                  console.log(`📊 HTML report generated: ${reportPath}`);
                } catch (error) {
                  console.log(`⚠️ Failed to generate HTML report: ${error.message}`);
                }
              }

              console.log(`\n📊 Comparison Summary:`);
              console.log(`✅ Identical: ${results.filter(r => r.status === 'identical').length}`);
              console.log(`❌ Different: ${results.filter(r => r.status === 'different').length}`);
              console.log(`⚠️ Errors: ${results.filter(r => r.status === 'error').length}`);

              // Set outputs
              console.log(`has_differences=${hasDifferences}` >> process.env.GITHUB_OUTPUT);
              if (reportPath) {
                console.log(`report_path=${reportPath}` >> process.env.GITHUB_OUTPUT);
              }
              
              // Create summary for Slack
              const summary = createSlackSummary(results);
              console.log(`slack_summary=${summary}` >> process.env.GITHUB_OUTPUT);
              
              // Also write to file for GitHub Actions to read
              const fs = require('fs');
              try {
                fs.writeFileSync('slack_summary.txt', summary);
              } catch (error) {
                console.log(`Warning: Could not write slack summary file: ${error.message}`);
              }

            } catch (error) {
              console.log(`❌ Action failed: ${error.message}`);
              console.log(`Error details: ${error.stack}`);
              process.exit(1);
            }
          }

          async function getCurrentBranch() {
            try {
              const { stdout } = await exec('git', ['rev-parse', '--abbrev-ref', 'HEAD']);
              return stdout.trim();
            } catch (error) {
              return 'unknown';
            }
          }

          async function findJsonFilesInFolder(folderPath, extensions, recursive) {
            const files = [];
            const fs = require('fs');
            const path = require('path');
            
            function scanDirectory(dir) {
              try {
                const items = fs.readdirSync(dir);
                for (const item of items) {
                  const fullPath = path.join(dir, item);
                  const stat = fs.statSync(fullPath);
                  
                  if (stat.isDirectory() && recursive) {
                    scanDirectory(fullPath);
                  } else if (stat.isFile()) {
                    const ext = path.extname(item).toLowerCase().substring(1);
                    if (extensions.includes(ext)) {
                      files.push(fullPath);
                    }
                  }
                }
              } catch (error) {
                console.log(`Warning: Could not scan directory ${dir}: ${error.message}`);
              }
            }
            
            scanDirectory(folderPath);
            return files;
          }

          async function fetchJsonFromUrl(url) {
            return new Promise((resolve, reject) => {
              const client = url.startsWith('https:') ? https : http;
              
              const request = client.get(url, (response) => {
                let data = '';
                
                response.on('data', (chunk) => {
                  data += chunk;
                });
                
                response.on('end', () => {
                  try {
                    if (response.statusCode >= 200 && response.statusCode < 300) {
                      const jsonData = JSON.parse(data);
                      resolve(jsonData);
                    } else if (response.statusCode === 404) {
                      console.log(`File not found (404): ${url} - will be ignored`);
                      resolve(null);
                    } else {
                      console.log(`HTTP ${response.statusCode} when fetching ${url}`);
                      resolve(null);
                    }
                  } catch (error) {
                    console.log(`Failed to parse JSON from ${url}: ${error.message}`);
                    resolve(null);
                  }
                });
              });
              
              request.on('error', (error) => {
                console.log(`Failed to fetch ${url}: ${error.message}`);
                resolve(null);
              });
              
              request.setTimeout(30000, () => {
                request.destroy();
                console.log(`Timeout fetching ${url}`);
                resolve(null);
              });
            });
          }

          async function readJsonFile(filePath) {
            try {
              const fs = require('fs');
              const data = fs.readFileSync(filePath, 'utf8');
              return JSON.parse(data);
            } catch (error) {
              console.log(`Failed to read JSON file ${filePath}: ${error.message}`);
              return null;
            }
          }

          function compareJsonFiles(localJson, remoteJson, options = {}) {
            // Use deep comparison that ignores key order completely
            const differences = deepCompare(localJson, remoteJson);
            
            if (differences.length === 0) {
              return { identical: true, differences: [] };
            }
            
            return {
              identical: false,
              differences: differences.map(d => formatDifference(d))
            };
          }

          function deepCompare(obj1, obj2, path = []) {
            const differences = [];
            
            // Handle null/undefined cases
            if (obj1 === null && obj2 === null) return differences;
            if (obj1 === null || obj2 === null) {
              differences.push({
                path: path.join('.'),
                kind: 'E',
                lhs: obj1,
                rhs: obj2,
                description: `Value changed from ${JSON.stringify(obj1)} to ${JSON.stringify(obj2)}`
              });
              return differences;
            }
            
            // Handle different types
            if (typeof obj1 !== typeof obj2) {
              differences.push({
                path: path.join('.'),
                kind: 'E',
                lhs: obj1,
                rhs: obj2,
                description: `Type changed from ${typeof obj1} to ${typeof obj2}`
              });
              return differences;
            }
            
            // Handle primitives
            if (typeof obj1 !== 'object') {
              if (obj1 !== obj2) {
                differences.push({
                  path: path.join('.'),
                  kind: 'E',
                  lhs: obj1,
                  rhs: obj2,
                  description: `Value changed from ${JSON.stringify(obj1)} to ${JSON.stringify(obj2)}`
                });
              }
              return differences;
            }
            
            // Handle arrays
            if (Array.isArray(obj1) && Array.isArray(obj2)) {
              if (obj1.length !== obj2.length) {
                differences.push({
                  path: path.join('.'),
                  kind: 'E',
                  lhs: obj1,
                  rhs: obj2,
                  description: `Array length changed from ${obj1.length} to ${obj2.length}`
                });
                return differences;
              }
              
              for (let i = 0; i < obj1.length; i++) {
                const itemPath = [...path, i];
                differences.push(...deepCompare(obj1[i], obj2[i], itemPath));
              }
              return differences;
            }
            
            // Handle objects - compare all keys from both objects
            const allKeys = new Set([...Object.keys(obj1), ...Object.keys(obj2)]);
            
            for (const key of allKeys) {
              const keyPath = [...path, key];
              const hasKey1 = key in obj1;
              const hasKey2 = key in obj2;
              
              if (!hasKey1 && hasKey2) {
                // Key added
                differences.push({
                  path: keyPath.join('.'),
                  kind: 'N',
                  lhs: undefined,
                  rhs: obj2[key],
                  description: `Property '${keyPath.join('.')}' was added`
                });
              } else if (hasKey1 && !hasKey2) {
                // Key removed
                differences.push({
                  path: keyPath.join('.'),
                  kind: 'D',
                  lhs: obj1[key],
                  rhs: undefined,
                  description: `Property '${keyPath.join('.')}' was removed`
                });
              } else {
                // Key exists in both - compare values
                differences.push(...deepCompare(obj1[key], obj2[key], keyPath));
              }
            }
            
            return differences;
          }

          function normalizeJsonObject(obj) {
            if (obj === null || typeof obj !== 'object') {
              return obj;
            }
            
            if (Array.isArray(obj)) {
              return obj.map(item => normalizeJsonObject(item));
            }
            
            // Sort object keys recursively
            const sortedObj = {};
            const sortedKeys = Object.keys(obj).sort();
            for (const key of sortedKeys) {
              sortedObj[key] = normalizeJsonObject(obj[key]);
            }
            
            return sortedObj;
          }

          function isMeaningfulDifference(diff) {
            // Only report differences that represent actual content changes
            switch (diff.kind) {
              case 'N': // New property added
                return true;
              case 'D': // Property deleted
                return true;
              case 'E': // Property value changed
                return true;
              case 'A': // Array item changed
                return true;
              default:
                return false;
            }
          }

          function formatDifference(diff) {
            const path = diff.path || 'root';
            const kind = diff.kind;
            
            switch (kind) {
              case 'N': // New property added
                return { 
                  path, 
                  kind: 'added', 
                  value: diff.rhs,
                  description: diff.description || `Property '${path}' was added`
                };
              case 'D': // Property deleted
                return { 
                  path, 
                  kind: 'removed', 
                  value: diff.lhs,
                  description: diff.description || `Property '${path}' was removed`
                };
              case 'E': // Property value changed
                return { 
                  path, 
                  kind: 'modified', 
                  oldValue: diff.lhs, 
                  newValue: diff.rhs,
                  description: diff.description || `Property '${path}' was changed from '${JSON.stringify(diff.lhs)}' to '${JSON.stringify(diff.rhs)}'`
                };
              case 'A': // Array item changed
                return {
                  path,
                  kind: 'array_change',
                  index: diff.index,
                  item: diff.item,
                  description: diff.description || `Array item at index ${diff.index} in '${path}' was ${diff.item.kind}`
                };
              default:
                return { 
                  path, 
                  kind: 'unknown', 
                  diff,
                  description: diff.description || `Unknown change type in '${path}'`
                };
            }
          }

          function createSlackSummary(results) {
            const differentFiles = results.filter(r => r.status === 'different');
            const errorFiles = results.filter(r => r.status === 'error');
            
            let summary = '';
            
            // Only show files with actual issues (differences or errors)
            if (differentFiles.length > 0) {
              summary += `🚨 Files with Changes (${differentFiles.length}):`;
              
              differentFiles.forEach((file, index) => {
                // Add line break before each file and make file names bold
                const safeFileName = file.file.replace(/[*_`]/g, '\\$&');
                summary += `\n\n${index + 1}. *${safeFileName}*`;
                summary += `\nFound ${file.differences.length} change(s):`;
                
                // Show first 3 differences with proper formatting
                file.differences.slice(0, 3).forEach((diff, diffIndex) => {
                  const icon = diff.kind === 'added' ? '➕' : diff.kind === 'removed' ? '➖' : '🔄';
                  // Escape special characters and truncate long descriptions
                  let safeDescription = diff.description.replace(/[*_`]/g, '\\$&');
                  if (safeDescription.length > 100) {
                    safeDescription = safeDescription.substring(0, 97) + '...';
                  }
                  summary += `\n${diffIndex + 1}. ${icon} ${safeDescription}`;
                });
                
                if (file.differences.length > 3) {
                  summary += `\n... and ${file.differences.length - 3} more changes`;
                }
              });
            }
            
            if (errorFiles.length > 0) {
              summary += `\n\n⚠️ Files with Problems (${errorFiles.length}):`;
              
              errorFiles.forEach((file, index) => {
                // Add line break before each file and make file names bold
                const safeFileName = file.file.replace(/[*_`]/g, '\\$&');
                summary += `\n\n${index + 1}. *${safeFileName}*`;
                summary += `\n❌ ${file.message}`;
              });
            }
            
            // If no issues, show success message
            if (differentFiles.length === 0 && errorFiles.length === 0) {
              summary += `\n\n✅ All files are up to date!`;
              summary += `\nNo changes found in any configuration files.`;
            }
            
            return summary.trim();
          }

          async function generateAndSaveReport(data, reportPath) {
            const html = generateComparisonReport(data);
            try {
              fs.writeFileSync(reportPath, html);
            } catch (error) {
              console.log(`Error writing report file: ${error.message}`);
              throw error;
            }
          }

          function generateComparisonReport(data) {
            return '<!DOCTYPE html>' +
              '<html lang="en">' +
              '<head>' +
              '<meta charset="UTF-8">' +
              '<meta name="viewport" content="width=device-width, initial-scale=1.0">' +
              '<title>JSON Comparison Report</title>' +
              '<style>' +
              'body { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }' +
              '.container { max-width: 1200px; margin: 0 auto; background: white; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }' +
              '.header { background: #2c3e50; color: white; padding: 20px; border-radius: 8px 8px 0 0; }' +
              '.header h1 { margin: 0; font-size: 24px; }' +
              '.header p { margin: 5px 0 0 0; opacity: 0.9; }' +
              '.tabs { display: flex; border-bottom: 1px solid #ddd; }' +
              '.tab { padding: 12px 20px; cursor: pointer; border-bottom: 2px solid transparent; }' +
              '.tab.active { border-bottom-color: #3498db; color: #3498db; }' +
              '.content { padding: 20px; }' +
              '.summary { background: #e9ecef; padding: 15px; border-radius: 4px; margin-bottom: 20px; }' +
              '.file-result { margin-bottom: 15px; padding: 10px; border-radius: 4px; }' +
              '.file-result.identical { background: #d4edda; border-left: 4px solid #28a745; }' +
              '.file-result.different { background: #f8d7da; border-left: 4px solid #dc3545; }' +
              '.file-result.error { background: #fff3cd; border-left: 4px solid #ffc107; }' +
              '.hidden { display: none; }' +
              '</style>' +
              '</head>' +
              '<body>' +
              '<div class="container">' +
              '<div class="header">' +
              '<h1>JSON Comparison Report</h1>' +
              '<p>Generated on ' + new Date(data.timestamp).toLocaleString() + '</p>' +
              '<p>Folder: ' + data.folder + ' | Base URL: ' + data.baseUrl + '</p>' +
              '</div>' +
              '<div class="tabs">' +
              '<div class="tab active" onclick="showTab(\'summary\')">Summary</div>' +
              '<div class="tab" onclick="showTab(\'details\')">Details</div>' +
              '</div>' +
              '<div class="content">' +
              '<div id="summary" class="tab-content">' +
              '<div class="summary">' +
              '<h3>Comparison Summary</h3>' +
              '<p><strong>Total Files:</strong> ' + data.results.length + '</p>' +
              '<p><strong>Identical:</strong> ' + data.results.filter(r => r.status === 'identical').length + '</p>' +
              '<p><strong>Different:</strong> ' + data.results.filter(r => r.status === 'different').length + '</p>' +
              '<p><strong>Errors:</strong> ' + data.results.filter(r => r.status === 'error').length + '</p>' +
              '</div>' +
              data.results.map(result => 
                '<div class="file-result ' + result.status + '">' +
                '<h4>' + result.file + '</h4>' +
                '<p><strong>Status:</strong> ' + result.status.toUpperCase() + '</p>' +
                '<p><strong>Message:</strong> ' + result.message + '</p>' +
                (result.differences ? 
                  '<p><strong>Differences:</strong> ' + result.differences.length + ' changes found</p>' +
                  '<ul>' + result.differences.map(diff => 
                    '<li><strong>' + diff.kind.toUpperCase() + ':</strong> ' + diff.description + '</li>'
                  ).join('') + '</ul>' 
                  : '') +
                '</div>'
              ).join('') +
              '</div>' +
              '<div id="details" class="tab-content hidden">' +
              '<h3>Detailed Comparison</h3>' +
              '<p>Detailed side-by-side comparison would be shown here for each file with differences.</p>' +
              '</div>' +
              '</div>' +
              '</div>' +
              '<script>' +
              'function showTab(tabName) {' +
              'document.querySelectorAll(".tab-content").forEach(content => content.classList.add("hidden"));' +
              'document.querySelectorAll(".tab").forEach(tab => tab.classList.remove("active"));' +
              'document.getElementById(tabName).classList.remove("hidden");' +
              'event.target.classList.add("active");' +
              '}' +
              '</script>' +
              '</body>' +
              '</html>';
          }

          run();
          EOF

          # Set environment variables
          export FOLDER_PATH="${{ needs.log-inputs.outputs.folder_path }}"
          export BASE_URL="${{ needs.log-inputs.outputs.base_url }}"
          export COMPARISON_MODE="${{ needs.log-inputs.outputs.comparison_mode }}"
          export IGNORE_KEYS="${{ needs.log-inputs.outputs.ignore_keys }}"
          export FILE_EXTENSIONS="${{ needs.log-inputs.outputs.file_extensions }}"
          export RECURSIVE="${{ needs.log-inputs.outputs.recursive }}"

          # Run the comparison
          node compare-json.js
          
          echo "completedAt=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT
          
          # Read slack summary from file
          if [ -f "slack_summary.txt" ]; then
            # Escape special characters for GitHub Actions output
            SLACK_SUMMARY=$(cat slack_summary.txt | sed 's/"/\\"/g' | sed 's/\*/\\*/g' | sed 's/\[/\\[/g' | sed 's/\]/\\]/g' | sed 's/</\\</g' | sed 's/>/\\>/g' | sed 's/&/\\&/g')
            echo "slack_summary<<EOF" >> $GITHUB_OUTPUT
            echo "$SLACK_SUMMARY" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "slack_summary=No summary available" >> $GITHUB_OUTPUT
          fi

  generate-html-report:
    needs: [log-inputs, run-comparison]
    runs-on: ubuntu-latest
    if: ${{ success() }}
    steps:
      - name: 📊 Generate HTML Report
        if: ${{ success() }}
        id: generate_html_report
        run: |
          echo "Generating HTML report for JSON comparison results..."
          # The report is automatically generated by the comparison action
          echo "Report generated in reports/ directory"
          echo "see report here: https://github.aexp.com/pages/amex-eng/json-validator/reports/" >> $GITHUB_STEP_SUMMARY
        continue-on-error: true

  deploy-reports:
    needs: [log-inputs, run-comparison, generate-html-report]
    runs-on: ubuntu-latest
    if: ${{ success() }}
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📊 Copy Reports to Repository
        run: |
          # Create reports directory if it doesn't exist
          mkdir -p reports
          
          # Copy the generated report to the repository
          if [ -f "reports/json-comparison-report-*.html" ]; then
            cp reports/json-comparison-report-*.html reports/
            echo "Report copied to repository"
          else
            echo "No report file found to copy"
          fi

      - name: 📝 Commit and Push Reports
        run: |
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Add and commit the reports
          git add reports/
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Add JSON comparison report - ${{ github.run_number }}"
            git push origin main
            echo "Report committed and pushed to main branch"
          fi

  slack-notification:
    needs: [log-inputs, run-comparison, generate-html-report, deploy-reports]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: 🔔 Slack Alert
        if: ${{ success() }}
        uses: amex-eng/github-actions-slack@v1.1.0
        id: notify
        with:
          slack-bot-user-oauth-access-token: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
          slack-channel: ${{ needs.log-inputs.outputs.slack_channel }}
          slack-text: |
            🔍 *Configuration Check Complete*
            
            📁 *What was checked:* `${{ needs.log-inputs.outputs.folder_path }}`
            🌐 *Source:* `${{ needs.log-inputs.outputs.base_url }}`
            ⏰ *Checked at:* `${{ needs.run-comparison.outputs.startedAt }}`
            
            ${{ needs.run-comparison.outputs.slack_summary || 'No detailed summary available. Check the full report for details.' }}
            
            📊 *Detailed report attached below*
            
            _Need help? Reply in this channel or contact the team._
          file-path: ${{ needs.run-comparison.outputs.report_path }}

      - name: 🔔 Slack Alert
        if: ${{ failure() }}
        uses: amex-eng/github-actions-slack@v1.1.0
        with:
          slack-bot-user-oauth-access-token: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
          slack-channel: ${{ needs.log-inputs.outputs.slack_channel }}
          slack-text: |
            ❌ *Configuration Check Failed*
            
            📁 *What was being checked:* `${{ needs.log-inputs.outputs.folder_path }}`
            🌐 *Source:* `${{ needs.log-inputs.outputs.base_url }}`
            ⏰ *Failed at:* `${{ needs.run-comparison.outputs.startedAt }}`
            
            ${{ needs.run-comparison.outputs.slack_summary || 'No detailed summary available. Check the full report for details.' }}
            
            📊 *Detailed report attached below*
            
            _Please check the report or contact the team for help._
          file-path: ${{ needs.run-comparison.outputs.report_path }}
